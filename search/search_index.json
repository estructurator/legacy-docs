{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u00bfQu\u00e9 es ESTRUCTURATOR? Estructurator es una herramienta orientada a apoyar al estudiante en el proceso de aprendizaje de estructuras de datos, viendo c\u00f3mo se comportan los espacios de memorias, pero que tambi\u00e9n es bastante \u00fatil para aquellos que apenas van a empezar en el mundo de algoritmos y programaci\u00f3n. Caracter\u00edsticas Lenguaje e interfaz completamente en Espa\u00f1ol Realiza pruebas, identifica y corrige errores Observa el comportamiento de tu c\u00f3digo, linea a linea Visualiza gr\u00e1ficamente el manejo de la memoria por parte de las estructuras de datos","title":"Introduccion"},{"location":"#que-es-estructurator","text":"Estructurator es una herramienta orientada a apoyar al estudiante en el proceso de aprendizaje de estructuras de datos, viendo c\u00f3mo se comportan los espacios de memorias, pero que tambi\u00e9n es bastante \u00fatil para aquellos que apenas van a empezar en el mundo de algoritmos y programaci\u00f3n.","title":"\u00bfQu\u00e9 es ESTRUCTURATOR?"},{"location":"#caracteristicas","text":"Lenguaje e interfaz completamente en Espa\u00f1ol Realiza pruebas, identifica y corrige errores Observa el comportamiento de tu c\u00f3digo, linea a linea Visualiza gr\u00e1ficamente el manejo de la memoria por parte de las estructuras de datos","title":"Caracter\u00edsticas"},{"location":"entorno/","text":"Estructurator\u00a9 est\u00e1 formado por: El Editor El editor de c\u00f3digo es la zona en la cual se ingresan las ordenes que se desean ejecutar en el int\u00e9rprete. Dichas instrucciones se deben escribir en pseudolenguaje en Espa\u00f1ol, cuya estructura est\u00e1 bien definida en la secci\u00f3n de Pseudolenguaje . El Tablero Si defines un apuntador a NULO o si decides crear un espacio de memoria para almacenar alg\u00fan dato, en el tablero vas a poder hacer seguimiento a los cambios que realizes en dichas variables. Tambi\u00e9n puedes utilizar la paleta de opciones para el tablero . Con ella puedes: Predefinir espacios de memorias (Nodo) \u00f3 apuntadores Definir los apuntamientos de los apuntadores Definir los valores de 'siguiente' y 'anterior' en los nodos de las listas todo antes de ejecutar tu algoritmo. \u00datil para ejecutar algoritmos que requieran una lista dada . Las acciones que est\u00e1n a la derecha tambi\u00e9n son muy \u00fatiles para hacer pruebas constantes. Se usan as\u00ed: Ajustar : Acomoda el ZOOM del tablero de tal forma que todo sea visible. Limpiar : Elimina todos los elementos del tablero, quedando solo NULO. Guardar : Toma el estado actual del tablero y lo almacena en memoria. Reiniciar : Carga lo que se haya guardado en memoria, si no se ha guardado nada, limpiar\u00e1. TIP : doble click en un nodo para editar su valor, doble click en un apuntador para cambiar el nombre, la tecla suprimir puede borrar los nodos. La Terminal y Tabla de simbolos Desde los algoritmos vas a poder imprimir cualquier tipo de texto en la terminal . Y en la tabla de simbolos vas a visualizar las variables definidas en el momento de la ejecuci\u00f3n del algoritmo, con sus respectivos valores y \u00e1mbitos.. Barra de ejecuci\u00f3n En orden de izquierda a derecha, las acciones de los botones son: Ejecutar Pausar Detener ejecuci\u00f3n Ejecutar hasta siguiente paso Ejecutar hasta el final a toda velocidad El deslizador de la derecha te permite aumentar o disminuir la velocidad de ejecuci\u00f3n del c\u00f3digo, de una l\u00ednea a otra. Puedes variarla incluso mientras se est\u00e9 ejecutando el c\u00f3digo.","title":"El entorno"},{"location":"entorno/#el-editor","text":"El editor de c\u00f3digo es la zona en la cual se ingresan las ordenes que se desean ejecutar en el int\u00e9rprete. Dichas instrucciones se deben escribir en pseudolenguaje en Espa\u00f1ol, cuya estructura est\u00e1 bien definida en la secci\u00f3n de Pseudolenguaje .","title":"El Editor"},{"location":"entorno/#el-tablero","text":"Si defines un apuntador a NULO o si decides crear un espacio de memoria para almacenar alg\u00fan dato, en el tablero vas a poder hacer seguimiento a los cambios que realizes en dichas variables. Tambi\u00e9n puedes utilizar la paleta de opciones para el tablero . Con ella puedes: Predefinir espacios de memorias (Nodo) \u00f3 apuntadores Definir los apuntamientos de los apuntadores Definir los valores de 'siguiente' y 'anterior' en los nodos de las listas todo antes de ejecutar tu algoritmo. \u00datil para ejecutar algoritmos que requieran una lista dada . Las acciones que est\u00e1n a la derecha tambi\u00e9n son muy \u00fatiles para hacer pruebas constantes. Se usan as\u00ed: Ajustar : Acomoda el ZOOM del tablero de tal forma que todo sea visible. Limpiar : Elimina todos los elementos del tablero, quedando solo NULO. Guardar : Toma el estado actual del tablero y lo almacena en memoria. Reiniciar : Carga lo que se haya guardado en memoria, si no se ha guardado nada, limpiar\u00e1. TIP : doble click en un nodo para editar su valor, doble click en un apuntador para cambiar el nombre, la tecla suprimir puede borrar los nodos.","title":"El Tablero"},{"location":"entorno/#la-terminal-y-tabla-de-simbolos","text":"Desde los algoritmos vas a poder imprimir cualquier tipo de texto en la terminal . Y en la tabla de simbolos vas a visualizar las variables definidas en el momento de la ejecuci\u00f3n del algoritmo, con sus respectivos valores y \u00e1mbitos..","title":"La Terminal y Tabla de simbolos"},{"location":"entorno/#barra-de-ejecucion","text":"En orden de izquierda a derecha, las acciones de los botones son: Ejecutar Pausar Detener ejecuci\u00f3n Ejecutar hasta siguiente paso Ejecutar hasta el final a toda velocidad El deslizador de la derecha te permite aumentar o disminuir la velocidad de ejecuci\u00f3n del c\u00f3digo, de una l\u00ednea a otra. Puedes variarla incluso mientras se est\u00e9 ejecutando el c\u00f3digo.","title":"Barra de ejecuci\u00f3n"},{"location":"estructura-de-datos/","text":"Estructuras de datos Los tipos de datos abstractos son una colecci\u00f3n de datos cuya organizaci\u00f3n se caracteriza por las funciones definidas utilizadas para almacenar y acceder a elementos individuales de datos (Fernandez y Fernandez, p\u00e1g. 5) . Listas Simples Atajo en el Editor: ls + TAB Una lista simple es una secuencia de nodos, donde el primer nodo tiene un campo donde almacena la direcci\u00f3n de un siguiente nodo, de su mismo tipo, y as\u00ed sucesivamente hasta el \u00faltimo nodo, el cual almacena NULO en su campo. El primer nodo de una lista simple es com\u00fanmente llamado cabeza , y puede ser accedido desde un apuntador (llamado com\u00fanmente PTR), que debe almacenar siempre la direci\u00f3n de memoria de dicha cabeza. Gr\u00e1ficamente, la lista simple se peude ver, de forma abstracta, as\u00ed: Y as\u00ed es com\u00fanmente como lo vemos en los textos. Lista Doble Atajo en el Editor: ld + TAB Una lista doble tiene las mismas caracter\u00edzticas que una lista simple, la diferencia aqu\u00ed es que cada nodo no solo almacena la informaci\u00f3n al siguiente nodo, sino tambi\u00e9n al anterior . Cabe resaltar que el nodo cabeza apunta en anterior hacia NULO, as\u00ed como lo hace normalmente en la lista simple el siguiente del \u00faltimo nodo. Lista Circular Atajo en el Editor: lc + TAB La lista circular es igual que la lista simple, pero cambia el hecho de que, el ultimo nodo apunta hacia el nodo cabeza: N\u00f3tese que ning\u00fan nodo apunta en siguiente a NULO. Lista Circular Doble Atajo en el Editor: lcd + TAB La lista circular doble es la implementaci\u00f3n de lista doble en la lista circular: EN CONSTRUCCI\u00d3N...","title":"Estructura de datos"},{"location":"estructura-de-datos/#estructuras-de-datos","text":"Los tipos de datos abstractos son una colecci\u00f3n de datos cuya organizaci\u00f3n se caracteriza por las funciones definidas utilizadas para almacenar y acceder a elementos individuales de datos (Fernandez y Fernandez, p\u00e1g. 5) .","title":"Estructuras de datos"},{"location":"estructura-de-datos/#listas-simples","text":"Atajo en el Editor: ls + TAB Una lista simple es una secuencia de nodos, donde el primer nodo tiene un campo donde almacena la direcci\u00f3n de un siguiente nodo, de su mismo tipo, y as\u00ed sucesivamente hasta el \u00faltimo nodo, el cual almacena NULO en su campo. El primer nodo de una lista simple es com\u00fanmente llamado cabeza , y puede ser accedido desde un apuntador (llamado com\u00fanmente PTR), que debe almacenar siempre la direci\u00f3n de memoria de dicha cabeza. Gr\u00e1ficamente, la lista simple se peude ver, de forma abstracta, as\u00ed: Y as\u00ed es com\u00fanmente como lo vemos en los textos.","title":"Listas Simples"},{"location":"estructura-de-datos/#lista-doble","text":"Atajo en el Editor: ld + TAB Una lista doble tiene las mismas caracter\u00edzticas que una lista simple, la diferencia aqu\u00ed es que cada nodo no solo almacena la informaci\u00f3n al siguiente nodo, sino tambi\u00e9n al anterior . Cabe resaltar que el nodo cabeza apunta en anterior hacia NULO, as\u00ed como lo hace normalmente en la lista simple el siguiente del \u00faltimo nodo.","title":"Lista Doble"},{"location":"estructura-de-datos/#lista-circular","text":"Atajo en el Editor: lc + TAB La lista circular es igual que la lista simple, pero cambia el hecho de que, el ultimo nodo apunta hacia el nodo cabeza: N\u00f3tese que ning\u00fan nodo apunta en siguiente a NULO.","title":"Lista Circular"},{"location":"estructura-de-datos/#lista-circular-doble","text":"Atajo en el Editor: lcd + TAB La lista circular doble es la implementaci\u00f3n de lista doble en la lista circular: EN CONSTRUCCI\u00d3N...","title":"Lista Circular Doble"},{"location":"lenguaje/","text":"ESTRUCTURATOR\u00a9 interpreta un pseudolenguaje en espa\u00f1ol, basado fuertemente en el pseudolenguaje utilizado en PSEInt . Caracteristicas Est\u00e1 en Espa\u00f1ol F\u00e1cil de entender Puedes usar estructuras condicionales, c\u00edclicas Definici\u00f3n de funciones Arreglos Tipado din\u00e1mico Salida/impresi\u00f3n Atajo en el Editor: imp + TAB la instrucci\u00f3n imprimir permite hacer salida de textos y/o variables a la terminal : imprimir \"Hola mundo\" Para concatenar puedes usar + (en la sentencia imprimir tambien puedes concatenar con , ): imprimir \"Tu nombre es \" + nombre imprimir \"Tu edad es \" , edad NOTA : La impresi\u00f3n anterior va a salir en una sola l\u00ednea. Para hacer saltos de l\u00ednea debes usar el caracter \\n imprimir \"Tu nombre es \" + nombre + \"\\n\" imprimir \"Tu edad es \" , edad , \"\\n\" Entrada/lectura Atajo en el Editor: leer + TAB la instrucci\u00f3n leer permita solicitar al usuario que ingrese una entrada del teclado. Puede ingresar n\u00fameros o texto: leer nombre Asignaci\u00f3n Para asignar un valor a una variable, basta con: nombre = \"Eddard Stark\" edad = 35 No se requiere definir las variables con anticipaci\u00f3n. Como dije antes, el pseudolenguaje es de tipado din\u00e1mico. Asignaci\u00f3n con operaci\u00f3n Aqu\u00ed no existen los famosos operadores de incremento/decremento (Ej: a++ , --edad , etc), pero puedes realizar un incremento o un decremento usando la asignaci\u00f3n con un simbolo de operaci\u00f3n antes: edad += 1 // \u00f3 edad = edad + 1 vida -= 1 // \u00f3 vida = vida - 1 hijos /= 2 // \u00f3 hijos = hijos / 2 caminos *= 2 // \u00f3 caminos = caminos * 2 par %= 2 // \u00f3 par = par%2 Vectores hijos = vector(6) \u00c9sto, crea la variable hijos con valor 0 en cada uno de sus 5 posiciones. Los vectores en nuestro pseudoc\u00f3digo comienzan con el \u00edndice 1 , no en 0 , como lo suelen hacer los lenguajes de programaci\u00f3n com\u00fanmente: hijos[1] = \"Robb\" hijos[2] = \"Jon Snow\" hijos[3] = \"Sansa\" hijos[4] = \"Arya\" hijos[5] = \"Brandon\" hijos[6] = \"Rickon\" Matrices cuadrado_magico = matriz(3,3) \u00c9sto, crea la variable cuadrado_magico con valor 0 en cada uno de sus 9 posiciones, pero esta vez no es lineal (una dimensi\u00f3n), sino de 2 dimensiones: una matriz. Al igual que los vectores, comienzan con el \u00edndice 1 : cuadrado_magico[1][1] = 4 cuadrado_magico[1][2] = 9 cuadrado_magico[1][3] = 2 cuadrado_magico[2][1] = 3 cuadrado_magico[2][2] = 5 cuadrado_magico[2][3] = 7 cuadrado_magico[3][1] = 8 cuadrado_magico[3][2] = 1 cuadrado_magico[3][3] = 6 Condicionales (Si, Sino) Las condicionales son las estructuras que nos permitir\u00e1n ejecutar un codigo u otro dependiendo de una condici\u00f3n l\u00f3gica: Atajo en el Editor: sis + TAB si edad >= 18 entonces imprimir \"Usted es mayor de edad\" sino imprimir \"Usted es aun menor de edad!\" fin si No es obligatorio que se defina el sino : Atajo en el Editor: si + TAB si edad >= 18 entonces imprimir \"Usted es mayor de edad\" fin si Multiples opciones (Segun) Atajo en el Editor: segun + TAB La secuencia de instrucciones ejecutada por una instrucci\u00f3n Segun depende del valor de una variable. Si la variable no cumple con ninguno de los pasos, ejecutar\u00e1 el caso por defecto , siempre y cuando est\u00e9 definida: segun libro hacer caso 1: imprimir \"Juego de tronos (1996)\" caso 2: imprimir \"Choque de reyes (1998)\" caso 3: imprimir \"Tormenta de espadas (2000)\" caso 4: imprimir \"Fest\u00edn de cuervos (2005)\" caso 5: imprimir \"Danza de dragones (2011)\" por defecto: imprimir \"[En desarrollo]\" fin segun Ciclo MIENTRAS La instrucci\u00f3n mientras ejecuta una secuencia de instrucciones mientras una condici\u00f3n sea verdadera. Atajo en el Editor: mq + TAB mientras edad < 18 hacer imprimir \"A\u00fan eres menor de edad, espera otro a\u00f1o\" edad = edad + 1 fin mientras Si en un principio es verdadera, se ejecuta, y seguir\u00e1 ejecutandose una y otra vez hasta que la condicion dada sea falsa. Por eso, la variable que est\u00e1 en la condici\u00f3n debe alterarse en cada iteraci\u00f3n del ciclo, para tener seguridad de que el ciclo no se ejecutar\u00e1 infinitamente. El ciclo mientras es com\u00fanmente usado para recorrer estructuras de datos enlazadas: Atajo en el Editor: mqp + TAB mientras p != NULO hacer /* codigo */ p = p->sig fin mientras Ciclo REPETIR Atajo en el Editor: rep + TAB La instrucci\u00f3n repetir funciona igual que el ciclo MIENTRAS, la diferencia es que, la condici\u00f3n es evaluada al final de la ejecuci\u00f3n del c\u00f3digo, por lo tanto, siempre va a garantizarse que por lo menos 1 vez se va a ejecutar el c\u00f3digo que est\u00e1 dentro del ciclo. \u00datil para cuando se desean recorrer estructuras c\u00edclicas, y es necesario que acabe donde comienza . repetir imprimir \"Tu edad es \", edad edad = edad + 1 hasta que edad >= 18 Note que la ejecuci\u00f3n del c\u00f3digo acabar\u00e1 HASTA que se cumpla la condici\u00f3n . Recuerde adem\u00e1s que la variable que est\u00e1 en la condici\u00f3n debe alterarse en cada iteraci\u00f3n del ciclo, para tener seguridad de que el ciclo no se ejecutar\u00e1 infinitamente. Ciclo PARA El ciclo para realiza un n\u00famero determinado de ejecuciones de un c\u00f3digo. Tiene 2 formas de usarse, convirti\u00e9ndose en realidad en 2 estructuras c\u00edclicas: Ciclo PARA com\u00fan Atajo en el Editor: para + TAB imprimir \"Tabla del 9: \" para i = 1 hasta 10 hacer n = 9*i imprimir \"9x\" , i , \"=\" , n fin para Ejecuta el ciclo iterando el valor de i del 1 al 10, aumentando siempre de 1 en 1. Ciclo PARA en vectores \u00f3 cadenas Atajo en el Editor: parac + TAB para cada hijo , hijos hacer imprimir hijo , \" es hijo de Eddard Stark\" fin para Ejecutar\u00e1 el ciclo para cada elemento del vector hijos , y cada uno de esos elementos los almacena en hijo . Si se trata de una cadena (ej: \"hola\"), la variable iteradora va a tomar el valor de cada caracter hasta acabar. Detener un ciclo/Pasar a siguiente iteraci\u00f3n Puedes detener la ejecuci\u00f3n de un ciclo usando la palabra romper , o si necesitas acabar la iteracci\u00f3n actual y seguir con la siguiente, puedes usar continuar . Funciones Una funci\u00f3n es una porci\u00f3n del algoritmo al cual le podemos dar una entrada y \u00e9l nos devolver\u00e1 una salida. Tambi\u00e9n suele ser llamado subprograma \u00f3 subrutina: Atajo en el Editor: fun + TAB funcion sumar (a,b) hacer suma = a + b devolver suma fin funcion //Ahora la llamamos (podemos hacerlo varias veces!) imprimir sumar(12,38) // La salida ser\u00e1 40 La palabra reservada devolver se encarga de enviar el valor al lugar del c\u00f3digo donde se hizo la llamada de la funci\u00f3n. No todas las funciones tienen que pedir par\u00e1metros de entrada, ni todas tienen que devolver un valor. Operadores y Funciones Este pseudolenguaje dispone de un conjunto b\u00e1sico de operadores y funciones que pueden ser utilizados para la construcci\u00f3n de expresiones m\u00e1s o menos complejas. Las siguientes tablas exhiben la totalidad de los operadores de este lenguaje reducido: Operador Significado Ejemplo Relacionales > Mayor que 3>2 < Menor que edad<18 == Igual que 8 == 3 <= Menor o igual que a<=b >= Mayor o igual que 4>=5 != \u00f3 <> Diferente 8 != 7 Logicos && Conjunci\u00f3n (y). (7>4) && (2==1) //falso || Disyunci\u00f3n (o). (1==1 || 2==1) //verdadero ! Negaci\u00f3n !(4<2) //verdadero Algebraicos + Suma total = cant1 + cant2 - Resta stock = disp - venta * Multiplicaci\u00f3n area = base * altura / Divisi\u00f3n porc = 100 * parte / total ^ \u00f3 ** Potenciaci\u00f3n sup = 3.41 * radio ^ 2 % \u00f3 MOD M\u00f3dulo (resto de la divisi\u00f3n entera) resto = num %div La jerarqu\u00eda de los operadores matem\u00e1ticos es igual a la del \u00e1lgebra, aunque puede alterarse mediante el uso de par\u00e9ntesis. A continuaci\u00f3n se listan las funciones integradas disponibles: Funcion Significado Ejemplo RAIZ(X) Raiz cuadrada de X raiz(2) // 1.4142135623730951 ABS(X) Valor absoluto de X abs(-10) // 10 LN(X) Logaritmo Natural de X ln(23) // 3.1354942159291497 EXP(X) Funcion exponencial de X exp(3) // 20.085536923187668 SEN(X) Seno de X sen(0) // 0 COS(X) Coseno de X cos(0) // 1 ATAN(X) Arcotangente de X atan(90) // 1.5596856728972892 ENTERO(X) Conversi\u00f3n a entero de X. entero(\"90\") // 90 CADENA(X) Conversi\u00f3n a Cadena de Texto de X cadena(90) // \"90\" ALEATORIO(X) Entero aleatorio entre 0 y X aleatorio(1,100) // 87 NUEVO() \u00f3 MALLOC() Nuevo espacio de memoria nuevo() // [NUEVO NODO EN TABLERO] LIBERAR(P) \u00f3 FREE(P) Libera espacio de memoria apuntado por P liberar(p) // [BORRA NODO APUNTADO POR p] LONGITUD(X) Longitud de X (vector/matriz/cadena) longitud(v) // longitud de v LIMPIAR(X) Limpia la secci\u00f3n X (\"terminal\" \u00f3 \"tablero\") limpiar(\"terminal\") // [BORRA CONTENIDO DE AL TERMINAL] MAYUSCULAS(X) Convierte las letras a May\u00fasculas mayusculas(\"hola\") // \"HOLA\" MINUSCULAS(X) Convierte las letras a Min\u00fasculas minusculas(\"HOLA\") // \"hola\"","title":"El lenguaje"},{"location":"lenguaje/#caracteristicas","text":"Est\u00e1 en Espa\u00f1ol F\u00e1cil de entender Puedes usar estructuras condicionales, c\u00edclicas Definici\u00f3n de funciones Arreglos Tipado din\u00e1mico","title":"Caracteristicas"},{"location":"lenguaje/#salidaimpresion","text":"Atajo en el Editor: imp + TAB la instrucci\u00f3n imprimir permite hacer salida de textos y/o variables a la terminal : imprimir \"Hola mundo\" Para concatenar puedes usar + (en la sentencia imprimir tambien puedes concatenar con , ): imprimir \"Tu nombre es \" + nombre imprimir \"Tu edad es \" , edad NOTA : La impresi\u00f3n anterior va a salir en una sola l\u00ednea. Para hacer saltos de l\u00ednea debes usar el caracter \\n imprimir \"Tu nombre es \" + nombre + \"\\n\" imprimir \"Tu edad es \" , edad , \"\\n\"","title":"Salida/impresi\u00f3n"},{"location":"lenguaje/#entradalectura","text":"Atajo en el Editor: leer + TAB la instrucci\u00f3n leer permita solicitar al usuario que ingrese una entrada del teclado. Puede ingresar n\u00fameros o texto: leer nombre","title":"Entrada/lectura"},{"location":"lenguaje/#asignacion","text":"Para asignar un valor a una variable, basta con: nombre = \"Eddard Stark\" edad = 35 No se requiere definir las variables con anticipaci\u00f3n. Como dije antes, el pseudolenguaje es de tipado din\u00e1mico.","title":"Asignaci\u00f3n"},{"location":"lenguaje/#asignacion-con-operacion","text":"Aqu\u00ed no existen los famosos operadores de incremento/decremento (Ej: a++ , --edad , etc), pero puedes realizar un incremento o un decremento usando la asignaci\u00f3n con un simbolo de operaci\u00f3n antes: edad += 1 // \u00f3 edad = edad + 1 vida -= 1 // \u00f3 vida = vida - 1 hijos /= 2 // \u00f3 hijos = hijos / 2 caminos *= 2 // \u00f3 caminos = caminos * 2 par %= 2 // \u00f3 par = par%2","title":"Asignaci\u00f3n con operaci\u00f3n"},{"location":"lenguaje/#vectores","text":"hijos = vector(6) \u00c9sto, crea la variable hijos con valor 0 en cada uno de sus 5 posiciones. Los vectores en nuestro pseudoc\u00f3digo comienzan con el \u00edndice 1 , no en 0 , como lo suelen hacer los lenguajes de programaci\u00f3n com\u00fanmente: hijos[1] = \"Robb\" hijos[2] = \"Jon Snow\" hijos[3] = \"Sansa\" hijos[4] = \"Arya\" hijos[5] = \"Brandon\" hijos[6] = \"Rickon\"","title":"Vectores"},{"location":"lenguaje/#matrices","text":"cuadrado_magico = matriz(3,3) \u00c9sto, crea la variable cuadrado_magico con valor 0 en cada uno de sus 9 posiciones, pero esta vez no es lineal (una dimensi\u00f3n), sino de 2 dimensiones: una matriz. Al igual que los vectores, comienzan con el \u00edndice 1 : cuadrado_magico[1][1] = 4 cuadrado_magico[1][2] = 9 cuadrado_magico[1][3] = 2 cuadrado_magico[2][1] = 3 cuadrado_magico[2][2] = 5 cuadrado_magico[2][3] = 7 cuadrado_magico[3][1] = 8 cuadrado_magico[3][2] = 1 cuadrado_magico[3][3] = 6","title":"Matrices"},{"location":"lenguaje/#condicionales-si-sino","text":"Las condicionales son las estructuras que nos permitir\u00e1n ejecutar un codigo u otro dependiendo de una condici\u00f3n l\u00f3gica: Atajo en el Editor: sis + TAB si edad >= 18 entonces imprimir \"Usted es mayor de edad\" sino imprimir \"Usted es aun menor de edad!\" fin si No es obligatorio que se defina el sino : Atajo en el Editor: si + TAB si edad >= 18 entonces imprimir \"Usted es mayor de edad\" fin si","title":"Condicionales (Si, Sino)"},{"location":"lenguaje/#multiples-opciones-segun","text":"Atajo en el Editor: segun + TAB La secuencia de instrucciones ejecutada por una instrucci\u00f3n Segun depende del valor de una variable. Si la variable no cumple con ninguno de los pasos, ejecutar\u00e1 el caso por defecto , siempre y cuando est\u00e9 definida: segun libro hacer caso 1: imprimir \"Juego de tronos (1996)\" caso 2: imprimir \"Choque de reyes (1998)\" caso 3: imprimir \"Tormenta de espadas (2000)\" caso 4: imprimir \"Fest\u00edn de cuervos (2005)\" caso 5: imprimir \"Danza de dragones (2011)\" por defecto: imprimir \"[En desarrollo]\" fin segun","title":"Multiples opciones (Segun)"},{"location":"lenguaje/#ciclo-mientras","text":"La instrucci\u00f3n mientras ejecuta una secuencia de instrucciones mientras una condici\u00f3n sea verdadera. Atajo en el Editor: mq + TAB mientras edad < 18 hacer imprimir \"A\u00fan eres menor de edad, espera otro a\u00f1o\" edad = edad + 1 fin mientras Si en un principio es verdadera, se ejecuta, y seguir\u00e1 ejecutandose una y otra vez hasta que la condicion dada sea falsa. Por eso, la variable que est\u00e1 en la condici\u00f3n debe alterarse en cada iteraci\u00f3n del ciclo, para tener seguridad de que el ciclo no se ejecutar\u00e1 infinitamente. El ciclo mientras es com\u00fanmente usado para recorrer estructuras de datos enlazadas: Atajo en el Editor: mqp + TAB mientras p != NULO hacer /* codigo */ p = p->sig fin mientras","title":"Ciclo MIENTRAS"},{"location":"lenguaje/#ciclo-repetir","text":"Atajo en el Editor: rep + TAB La instrucci\u00f3n repetir funciona igual que el ciclo MIENTRAS, la diferencia es que, la condici\u00f3n es evaluada al final de la ejecuci\u00f3n del c\u00f3digo, por lo tanto, siempre va a garantizarse que por lo menos 1 vez se va a ejecutar el c\u00f3digo que est\u00e1 dentro del ciclo. \u00datil para cuando se desean recorrer estructuras c\u00edclicas, y es necesario que acabe donde comienza . repetir imprimir \"Tu edad es \", edad edad = edad + 1 hasta que edad >= 18 Note que la ejecuci\u00f3n del c\u00f3digo acabar\u00e1 HASTA que se cumpla la condici\u00f3n . Recuerde adem\u00e1s que la variable que est\u00e1 en la condici\u00f3n debe alterarse en cada iteraci\u00f3n del ciclo, para tener seguridad de que el ciclo no se ejecutar\u00e1 infinitamente.","title":"Ciclo REPETIR"},{"location":"lenguaje/#ciclo-para","text":"El ciclo para realiza un n\u00famero determinado de ejecuciones de un c\u00f3digo. Tiene 2 formas de usarse, convirti\u00e9ndose en realidad en 2 estructuras c\u00edclicas:","title":"Ciclo PARA"},{"location":"lenguaje/#ciclo-para-comun","text":"Atajo en el Editor: para + TAB imprimir \"Tabla del 9: \" para i = 1 hasta 10 hacer n = 9*i imprimir \"9x\" , i , \"=\" , n fin para Ejecuta el ciclo iterando el valor de i del 1 al 10, aumentando siempre de 1 en 1.","title":"Ciclo PARA com\u00fan"},{"location":"lenguaje/#ciclo-para-en-vectores-o-cadenas","text":"Atajo en el Editor: parac + TAB para cada hijo , hijos hacer imprimir hijo , \" es hijo de Eddard Stark\" fin para Ejecutar\u00e1 el ciclo para cada elemento del vector hijos , y cada uno de esos elementos los almacena en hijo . Si se trata de una cadena (ej: \"hola\"), la variable iteradora va a tomar el valor de cada caracter hasta acabar.","title":"Ciclo PARA en vectores \u00f3 cadenas"},{"location":"lenguaje/#detener-un-ciclopasar-a-siguiente-iteracion","text":"Puedes detener la ejecuci\u00f3n de un ciclo usando la palabra romper , o si necesitas acabar la iteracci\u00f3n actual y seguir con la siguiente, puedes usar continuar .","title":"Detener un ciclo/Pasar a siguiente iteraci\u00f3n"},{"location":"lenguaje/#funciones","text":"Una funci\u00f3n es una porci\u00f3n del algoritmo al cual le podemos dar una entrada y \u00e9l nos devolver\u00e1 una salida. Tambi\u00e9n suele ser llamado subprograma \u00f3 subrutina: Atajo en el Editor: fun + TAB funcion sumar (a,b) hacer suma = a + b devolver suma fin funcion //Ahora la llamamos (podemos hacerlo varias veces!) imprimir sumar(12,38) // La salida ser\u00e1 40 La palabra reservada devolver se encarga de enviar el valor al lugar del c\u00f3digo donde se hizo la llamada de la funci\u00f3n. No todas las funciones tienen que pedir par\u00e1metros de entrada, ni todas tienen que devolver un valor.","title":"Funciones"},{"location":"lenguaje/#operadores-y-funciones","text":"Este pseudolenguaje dispone de un conjunto b\u00e1sico de operadores y funciones que pueden ser utilizados para la construcci\u00f3n de expresiones m\u00e1s o menos complejas. Las siguientes tablas exhiben la totalidad de los operadores de este lenguaje reducido: Operador Significado Ejemplo Relacionales > Mayor que 3>2 < Menor que edad<18 == Igual que 8 == 3 <= Menor o igual que a<=b >= Mayor o igual que 4>=5 != \u00f3 <> Diferente 8 != 7 Logicos && Conjunci\u00f3n (y). (7>4) && (2==1) //falso || Disyunci\u00f3n (o). (1==1 || 2==1) //verdadero ! Negaci\u00f3n !(4<2) //verdadero Algebraicos + Suma total = cant1 + cant2 - Resta stock = disp - venta * Multiplicaci\u00f3n area = base * altura / Divisi\u00f3n porc = 100 * parte / total ^ \u00f3 ** Potenciaci\u00f3n sup = 3.41 * radio ^ 2 % \u00f3 MOD M\u00f3dulo (resto de la divisi\u00f3n entera) resto = num %div La jerarqu\u00eda de los operadores matem\u00e1ticos es igual a la del \u00e1lgebra, aunque puede alterarse mediante el uso de par\u00e9ntesis. A continuaci\u00f3n se listan las funciones integradas disponibles: Funcion Significado Ejemplo RAIZ(X) Raiz cuadrada de X raiz(2) // 1.4142135623730951 ABS(X) Valor absoluto de X abs(-10) // 10 LN(X) Logaritmo Natural de X ln(23) // 3.1354942159291497 EXP(X) Funcion exponencial de X exp(3) // 20.085536923187668 SEN(X) Seno de X sen(0) // 0 COS(X) Coseno de X cos(0) // 1 ATAN(X) Arcotangente de X atan(90) // 1.5596856728972892 ENTERO(X) Conversi\u00f3n a entero de X. entero(\"90\") // 90 CADENA(X) Conversi\u00f3n a Cadena de Texto de X cadena(90) // \"90\" ALEATORIO(X) Entero aleatorio entre 0 y X aleatorio(1,100) // 87 NUEVO() \u00f3 MALLOC() Nuevo espacio de memoria nuevo() // [NUEVO NODO EN TABLERO] LIBERAR(P) \u00f3 FREE(P) Libera espacio de memoria apuntado por P liberar(p) // [BORRA NODO APUNTADO POR p] LONGITUD(X) Longitud de X (vector/matriz/cadena) longitud(v) // longitud de v LIMPIAR(X) Limpia la secci\u00f3n X (\"terminal\" \u00f3 \"tablero\") limpiar(\"terminal\") // [BORRA CONTENIDO DE AL TERMINAL] MAYUSCULAS(X) Convierte las letras a May\u00fasculas mayusculas(\"hola\") // \"HOLA\" MINUSCULAS(X) Convierte las letras a Min\u00fasculas minusculas(\"HOLA\") // \"hola\"","title":"Operadores y Funciones"}]}